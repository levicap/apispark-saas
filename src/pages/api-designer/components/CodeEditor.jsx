import React, { useState, useEffect } from 'react';
import Editor from '@monaco-editor/react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Select from '../../../components/ui/Select';

const CodeEditor = ({ 
  isOpen = false, 
  onClose, 
  selectedNode, 
  workflowNodes = [],
  currentProject,
  generatedFiles = {}
}) => {
  const [language, setLanguage] = useState('javascript');
  const [theme, setTheme] = useState('vs-dark');
  const [code, setCode] = useState('');
  const [activeFile, setActiveFile] = useState('main');
  const [files, setFiles] = useState({});

  const languages = [
    { value: 'javascript', label: 'JavaScript (Node.js)' },
    { value: 'python', label: 'Python' },
    { value: 'java', label: 'Java' },
    { value: 'csharp', label: 'C#' },
    { value: 'go', label: 'Go' },
    { value: 'typescript', label: 'TypeScript' }
  ];

  const themes = [
    { value: 'vs-dark', label: 'Dark' },
    { value: 'light', label: 'Light' },
    { value: 'hc-black', label: 'High Contrast' }
  ];

  // Generate code based on workflow
  const generateWorkflowCode = () => {
    if (!workflowNodes?.length) return '';

    const framework = currentProject?.metadata?.framework || 'Express.js';
    
    if (framework === 'Express.js' || language === 'javascript') {
      return generateExpressCode();
    } else if (language === 'python') {
      return generateFastAPICode();
    } else if (language === 'java') {
      return generateSpringBootCode();
    } else if (language === 'csharp') {
      return generateDotNetCode();
    }
    
    return generateExpressCode();
  };

  // Initialize files when component mounts or workflow changes
  useEffect(() => {
    if (Object.keys(generatedFiles).length > 0) {
      // Use files from AI agent
      setFiles(generatedFiles);
      setCode(generatedFiles['main.js'] || Object.values(generatedFiles)[0] || '');
    } else if (workflowNodes?.length > 0 && currentProject) {
      // Generate files from workflow
      const generatedFiles = {
        'main.js': generateExpressCode(),
        'package.json': generatePackageJson(),
        'README.md': generateReadme(),
        'routes/index.js': generateRoutesCode(),
        'middleware/auth.js': generateAuthMiddleware(),
        'config/database.js': generateDatabaseConfig()
      };
      
      setFiles(generatedFiles);
      setCode(generatedFiles['main.js'] || '');
    }
  }, [workflowNodes, currentProject, language, generatedFiles]);

  const generatePackageJson = () => {
    return `{
  "name": "${currentProject?.name?.toLowerCase().replace(/\s+/g, '-') || 'api-project'}",
  "version": "1.0.0",
  "description": "Generated API for ${currentProject?.name || 'Project'}",
  "main": "main.js",
  "scripts": {
    "start": "node main.js",
    "dev": "nodemon main.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.7.0",
    "joi": "^17.9.2",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "dotenv": "^16.0.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.6.2"
  }
}`;
  };

  const generateReadme = () => {
    return `# ${currentProject?.name || 'Project'}

This API was generated using APIForge's AI-powered code generation system.

## Features

- RESTful API endpoints
- Automatic validation
- Error handling
- Security middleware
- Database integration ready

## Getting Started

1. Install dependencies: \`npm install\`
2. Start the server: \`npm start\`
3. For development: \`npm run dev\`

## API Endpoints

${workflowNodes?.filter(n => n.type === 'service').map(node => {
  const endpoints = node.data?.endpoints || [];
  return endpoints.map(endpoint => `- ${endpoint} - ${node.name}`).join('\n');
}).join('\n')}

## Environment Variables

- PORT - Server port (default: 3000)
- JWT_SECRET - Secret key for JWT tokens

## License

Generated by APIForge`;
  };

  const generateRoutesCode = () => {
    const serviceNodes = workflowNodes?.filter(n => n.type === 'service') || [];
    
    return `// ${currentProject?.name || 'Project'} - API Routes
const express = require('express');
const router = express.Router();

// Import controllers
${serviceNodes.map(node => `const ${node.name.toLowerCase().replace(/\s+/g, '')}Controller = require('../controllers/${node.name.toLowerCase().replace(/\s+/g, '')}Controller');`).join('\n')}

// Import middleware
const authMiddleware = require('../middleware/auth');

${serviceNodes.map(node => {
  const endpoints = node.data?.endpoints || [];
  return endpoints.map(endpoint => {
    const [method, path] = endpoint.split(' ');
    const controllerName = node.name.toLowerCase().replace(/\s+/g, '');
    const actionName = method.toLowerCase() + path.split('/').pop().replace(/[^a-zA-Z]/g, '');
    
    return `// ${endpoint}
router.${method.toLowerCase()}('${path}', authMiddleware, ${controllerName}Controller.${actionName});`;
  }).join('\n');
}).join('\n\n')}

module.exports = router;`;
  };

  const generateAuthMiddleware = () => {
    return `// ${currentProject?.name || 'Project'} - Authentication Middleware
const jwt = require('jsonwebtoken');

const authMiddleware = (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({ error: 'Access token required' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid or expired token' });
  }
};

module.exports = authMiddleware;`;
  };

  const generateDatabaseConfig = () => {
    const dbType = currentProject?.databaseType || 'PostgreSQL';
    
    return `// ${currentProject?.name || 'Project'} - Database Configuration
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || '${currentProject?.name?.toLowerCase().replace(/\s+/g, '_') || 'api_project'}',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

pool.on('connect', () => {
  console.log('Connected to database');
});

pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
  process.exit(-1);
});

module.exports = pool;`;
  };

  const generateExpressCode = () => {
    const routes = workflowNodes?.filter(node => 
      ['get', 'post', 'put', 'patch', 'delete']?.includes(node?.type)
    );

    return `const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use(limiter);

// Routes
${routes?.map(node => `
app.${node?.type}('${node?.data?.endpoint || '/api/endpoint'}', async (req, res) => {
  try {
    // TODO: Implement ${node?.name} logic
    // Description: ${node?.data?.description || 'No description provided'}
    
    // Request validation
    const { error, value } = validateRequest(req.body);
    if (error) {
      return res.status(400).json({ 
        error: 'Validation failed',
        details: error.details 
      });
    }

    // Business logic here
    const result = await process${node?.name?.replace(/\s/g, '')}(value);
    
    // Success response
    res.status(${node?.type === 'post' ? '201' : '200'}).json({
      success: true,
      data: result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});`)?.join('')}

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Something broke!',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    message: \`The route \${req.originalUrl} does not exist\`
  });
});

// Start server
app.listen(PORT, () => {
  console.log(\`ðŸš€ Server running on port \${PORT}\`);
  console.log(\`ðŸ“– API Documentation: http://localhost:\${PORT}/docs\`);
});

module.exports = app;`;
  };

  const generateFastAPICode = () => {
    const routes = workflowNodes?.filter(node => 
      ['get', 'post', 'put', 'patch', 'delete']?.includes(node?.type)
    );

    return `from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
import uvicorn
from datetime import datetime
from typing import Optional, Dict, Any
from pydantic import BaseModel

# Rate limiting
limiter = Limiter(key_func=get_remote_address)

# FastAPI app
app = FastAPI(
    title="${currentProject?.name || 'API'} Server",
    description="${currentProject?.description || 'Generated API server'}",
    version="1.0.0"
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(TrustedHostMiddleware, allowed_hosts=["*"])
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Response models
class SuccessResponse(BaseModel):
    success: bool = True
    data: Optional[Dict[Any, Any]] = None
    timestamp: str

class ErrorResponse(BaseModel):
    error: str
    message: str

# Routes
${routes?.map(node => `
@app.${node?.type}("${node?.data?.endpoint || '/api/endpoint'}")
@limiter.limit("100/minute")
async def ${node?.name?.toLowerCase()?.replace(/\s/g, '_') || 'endpoint'}(request: Request):
    """
    ${node?.data?.description || 'No description provided'}
    """
    try:
        # TODO: Implement ${node?.name} logic
        
        # Business logic here
        result = await process_${node?.name?.toLowerCase()?.replace(/\s/g, '_')}()
        
        return SuccessResponse(
            data=result,
            timestamp=datetime.now().isoformat()
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )`)?.join('')}

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )`;
  };

  const generateSpringBootCode = () => {
    const routes = workflowNodes?.filter(node => 
      ['get', 'post', 'put', 'patch', 'delete']?.includes(node?.type)
    );

    return `package com.example.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@SpringBootApplication
@RestController
@CrossOrigin(origins = "*")
public class ApiApplication {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public static void main(String[] args) {
        SpringApplication.run(ApiApplication.class, args);
    }

${routes?.map(node => `
    @${node?.type?.toUpperCase() === 'GET' ? 'GetMapping' : 
         node?.type?.toUpperCase() === 'POST' ? 'PostMapping' :
         node?.type?.toUpperCase() === 'PUT' ? 'PutMapping' :
         node?.type?.toUpperCase() === 'PATCH' ? 'PatchMapping' : 'DeleteMapping'}("${node?.data?.endpoint || '/api/endpoint'}")
    public ResponseEntity<Map<String, Object>> ${node?.name?.toLowerCase()?.replace(/\s/g, '') || 'endpoint'}(
        ${node?.type === 'post' || node?.type === 'put' || node?.type === 'patch' ? '@RequestBody Map<String, Object> requestBody' : ''}
    ) {
        try {
            // TODO: Implement ${node?.name} logic
            // Description: ${node?.data?.description || 'No description provided'}
            
            // Business logic here
            Map<String, Object> result = process${node?.name?.replace(/\s/g, '') || 'Request'}(${node?.type === 'post' || node?.type === 'put' || node?.type === 'patch' ? 'requestBody' : ''});
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("data", result);
            response.put("timestamp", LocalDateTime.now().toString());
            
            return ResponseEntity.${node?.type === 'post' ? 'status(HttpStatus.CREATED)' : 'ok()'}.body(response);
        } catch (Exception e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Internal server error");
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }`)?.join('')}

    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "healthy");
        response.put("timestamp", LocalDateTime.now().toString());
        return ResponseEntity.ok(response);
    }

${routes?.map(node => `
    private Map<String, Object> process${node?.name?.replace(/\s/g, '') || 'Request'}(${node?.type === 'post' || node?.type === 'put' || node?.type === 'patch' ? 'Map<String, Object> data' : ''}) {
        // TODO: Implement business logic for ${node?.name}
        Map<String, Object> result = new HashMap<>();
        result.put("message", "${node?.name} processed successfully");
        return result;
    }`)?.join('')}
}`;
  };

  const generateDotNetCode = () => {
    const routes = workflowNodes?.filter(node => 
      ['get', 'post', 'put', 'patch', 'delete']?.includes(node?.type)
    );

    return `using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

namespace ApiServer.Controllers;

[ApiController]
[Route("api")]
public class ApiController : ControllerBase
{
    private readonly ILogger<ApiController> _logger;

    public ApiController(ILogger<ApiController> logger)
    {
        _logger = logger;
    }

${routes?.map(node => `
    [Http${node?.type?.charAt(0)?.toUpperCase() + node?.type?.slice(1)}("${node?.data?.endpoint?.replace('/api/', '') || 'endpoint'}")]
    public async Task<ActionResult<object>> ${node?.name?.replace(/\s/g, '') || 'Endpoint'}(${node?.type === 'post' || node?.type === 'put' || node?.type === 'patch' ? '[FromBody] dynamic requestBody' : ''})
    {
        try
        {
            // TODO: Implement ${node?.name} logic
            // Description: ${node?.data?.description || 'No description provided'}
            
            // Business logic here
            var result = await Process${node?.name?.replace(/\s/g, '') || 'Request'}(${node?.type === 'post' || node?.type === 'put' || node?.type === 'patch' ? 'requestBody' : ''});
            
            return Ok(new
            {
                success = true,
                data = result,
                timestamp = DateTime.UtcNow.ToString("O")
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error processing ${node?.name}");
            return StatusCode(500, new
            {
                error = "Internal server error",
                message = ex.Message
            });
        }
    }`)?.join('')}

    [HttpGet("health")]
    public ActionResult<object> HealthCheck()
    {
        return Ok(new
        {
            status = "healthy",
            timestamp = DateTime.UtcNow.ToString("O")
        });
    }

${routes?.map(node => `
    private async Task<object> Process${node?.name?.replace(/\s/g, '') || 'Request'}(${node?.type === 'post' || node?.type === 'put' || node?.type === 'patch' ? 'dynamic data' : ''})
    {
        // TODO: Implement business logic for ${node?.name}
        await Task.Delay(10); // Simulate async operation
        return new { message = "${node?.name} processed successfully" };
    }`)?.join('')}
}

// Program.cs
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors();
app.UseAuthorization();
app.MapControllers();

app.Run();`;
  };

  const downloadCode = () => {
    const element = document.createElement('a');
    const file = new Blob([code], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${activeFile}.${language === 'javascript' ? 'js' : language === 'python' ? 'py' : language === 'java' ? 'java' : 'cs'}`;
    document.body?.appendChild(element);
    element?.click();
    document.body?.removeChild(element);
  };

  const copyCode = async () => {
    try {
      await navigator?.clipboard?.writeText(code);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-black/80 ml-20 mt-20">
      <div className="h-full flex flex-col bg-background">
        {/* Header */}
        <div className="h-12 bg-surface border-b border-border flex items-center justify-between px-4">
          <div className="flex items-center space-x-4">
            <h2 className="text-sm font-medium text-foreground">Code Editor</h2>
            <div className="flex items-center space-x-2">
              <Select
                value={language}
                onChange={setLanguage}
                options={languages}
                className="w-48"
              />
              <Select
                value={theme}
                onChange={setTheme}
                options={themes}
                className="w-32"
              />
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={copyCode}>
              <Icon name="Copy" size={14} />
              Copy
            </Button>
            <Button variant="outline" size="sm" onClick={downloadCode}>
              <Icon name="Download" size={14} />
              Download
            </Button>
            <Button variant="ghost" size="icon" onClick={onClose}>
              <Icon name="X" size={16} />
            </Button>
          </div>
        </div>

        <div className="flex-1 flex">
          {/* File Explorer */}
          <div className="w-64 bg-surface border-r border-border flex flex-col">
            <div className="h-8 bg-muted border-b border-border flex items-center px-3">
              <span className="text-xs font-medium text-muted-foreground">FILES</span>
            </div>
            <div className="flex-1 p-2">
              {Object.keys(files)?.map(fileName => (
                <button
                  key={fileName}
                  onClick={() => {
                    setActiveFile(fileName);
                    setCode(files?.[fileName]);
                  }}
                  className={`w-full text-left px-2 py-1 text-sm rounded transition-smooth ${
                    activeFile === fileName
                      ? 'bg-primary text-primary-foreground'
                      : 'text-foreground hover:bg-muted'
                  }`}
                >
                  <Icon 
                    name={
                      fileName?.endsWith('.js') || fileName?.endsWith('.ts') ? 'FileText' :
                      fileName?.endsWith('.json') ? 'Braces' :
                      fileName?.endsWith('.md') ? 'FileText' : 'File'
                    } 
                    size={14} 
                    className="inline mr-2" 
                  />
                  {fileName}
                </button>
              ))}
            </div>
          </div>

          {/* Editor */}
          <div className="flex-1">
            <Editor
              height="100%"
              language={activeFile?.endsWith('.json') ? 'json' : activeFile?.endsWith('.md') ? 'markdown' : language}
              theme={theme}
              value={code}
              onChange={(value) => setCode(value || '')}
              options={{
                minimap: { enabled: true },
                fontSize: 14,
                lineNumbers: 'on',
                roundedSelection: false,
                scrollBeyondLastLine: false,
                automaticLayout: true,
                wordWrap: 'on',
                folding: true,
                lineHeight: 24,
                fontFamily: "'Fira Code', 'Monaco', 'Menlo', monospace",
                fontLigatures: true,
                bracketPairColorization: { enabled: true },
                guides: {
                  bracketPairs: true,
                  indentation: true
                }
              }}
            />
          </div>
        </div>

        {/* Status Bar */}
        <div className="h-6 bg-surface border-t border-border flex items-center justify-between px-4 text-xs text-muted-foreground">
          <div className="flex items-center space-x-4">
            <span>Generated from {workflowNodes?.length} nodes</span>
            <span>â€¢</span>
            <span>{language}</span>
            <span>â€¢</span>
            <span>{currentProject?.metadata?.framework}</span>
          </div>
          <div className="flex items-center space-x-4">
            <span>Lines: {code?.split('\n')?.length}</span>
            <span>â€¢</span>
            <span>Characters: {code?.length}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeEditor;